from typing import Dict, Callable, List, Tuple

class CommandHandler:
    def __init__(self):
        self.commands = {
            '/help': self.help_command,
            '/status': self.status_command,
            '/reset': self.reset_command,
            '/analyze': self.analyze_command,
            '/export': self.export_command,
            '/compare': self.compare_command,
            '/settings': self.settings_command
        }
        
    def process_command(self, command: str, args: List[str], context: Dict) -> str:
        """Procesa un comando del chatbot"""
        if command in self.commands:
            return self.commands[command](args, context)
        return f"Comando desconocido: {command}. Usa /help para ver comandos disponibles."
    
    def help_command(self, args: List[str], context: Dict) -> str:
        """Muestra ayuda sobre comandos disponibles"""
        return """
üìã **Comandos Disponibles:**

üîπ `/help` - Muestra esta ayuda
üîπ `/status` - Estado actual del an√°lisis
üîπ `/reset` - Reinicia la sesi√≥n
üîπ `/analyze [tipo]` - Inicia an√°lisis (tipos: basic, semantic, tfidf, ai)
üîπ `/compare` - Compara documentos cargados
üîπ `/export [formato]` - Exporta resultados (pdf, json, html)
üîπ `/settings` - Configuraci√≥n del an√°lisis

üí° **Ejemplos:**
- `/analyze semantic` - An√°lisis sem√°ntico
- `/export pdf` - Exportar como PDF
        """
    
    def status_command(self, args: List[str], context: Dict) -> str:
        """Muestra el estado actual"""
        state = context.get('state', 'idle')
        docs = context.get('documents_loaded', 0)
        
        status_messages = {
            'idle': 'üò¥ En espera de documentos',
            'awaiting_documents': f'üìÑ {docs}/2 documentos cargados',
            'document_loaded': '‚úÖ Documentos listos para an√°lisis',
            'analyzing': '‚öôÔ∏è Analizando documentos...',
            'results_ready': 'üìä Resultados disponibles'
        }
        
        return f"""
**Estado Actual:** {status_messages.get(state, 'Desconocido')}
**Documentos cargados:** {docs}
**Sesi√≥n iniciada:** {context.get('session_info', {}).get('start_time', 'N/A')}
        """
    
    def reset_command(self, args: List[str], context: Dict) -> str:
        """Reinicia la sesi√≥n"""
        return "üîÑ Sesi√≥n reiniciada. Puedes cargar nuevos documentos."
    
    def analyze_command(self, args: List[str], context: Dict) -> str:
        """Inicia el an√°lisis"""
        if context.get('documents_loaded', 0) < 2:
            return "‚ùå Necesitas cargar 2 documentos antes de analizar."
        
        analysis_type = args[0] if args else 'all'
        valid_types = ['basic', 'semantic', 'tfidf', 'ai', 'all']
        
        if analysis_type not in valid_types:
            return f"‚ùå Tipo de an√°lisis inv√°lido. Opciones: {', '.join(valid_types)}"
        
        return f"üîç Iniciando an√°lisis {analysis_type}..."
    
    def export_command(self, args: List[str], context: Dict) -> str:
        """Exporta los resultados"""
        if not context.get('has_results', False):
            return "‚ùå No hay resultados para exportar. Ejecuta un an√°lisis primero."
        
        export_format = args[0] if args else 'pdf'
        valid_formats = ['pdf', 'json', 'html', 'docx']
        
        if export_format not in valid_formats:
            return f"‚ùå Formato inv√°lido. Opciones: {', '.join(valid_formats)}"
        
        return f"üì• Exportando resultados en formato {export_format.upper()}..."
    
    def compare_command(self, args: List[str], context: Dict) -> str:
        """Compara documentos r√°pidamente"""
        if context.get('documents_loaded', 0) < 2:
            return "‚ùå Necesitas cargar 2 documentos para comparar."
        
        return "‚ö° Iniciando comparaci√≥n r√°pida..."
    
    def settings_command(self, args: List[str], context: Dict) -> str:
        """Muestra o modifica configuraci√≥n"""
        return """
‚öôÔ∏è **Configuraci√≥n Actual:**

‚Ä¢ **Modelo LLM:** GPT-4
‚Ä¢ **Idioma:** Espa√±ol
‚Ä¢ **Umbral similitud:** 0.7
‚Ä¢ **An√°lisis profundo:** Activado
‚Ä¢ **Auto-exportar:** Desactivado

Usa `/settings [opci√≥n] [valor]` para modificar.
        """